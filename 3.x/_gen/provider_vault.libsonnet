local tf = (import 'github.com/tf-libsonnet/core/main.libsonnet');
local d = (import 'github.com/jsonnet-libs/docsonnet/doc-util/main.libsonnet');
{
  '#':: d.pkg(name='provider', url='', help='`provider` represents the `vault` Terraform provider config.\n\n\n\nThis package contains functions and utilities for setting up the provider using Jsonnet code.\n'),
  '#new':: d.fn(help='\n`vault.provider.new` injects a new `vault` Terraform `provider`\nblock into the root module document.\n\nOptionally, this inserts the provider into the\n[required_providers](https://developer.hashicorp.com/terraform/language/providers/requirements) `terraform` sub block if\nthe `src` and/or `version` parameters are set.\n\n**Args**:\n  - `add_address_to_env` (`string`): If true, adds the value of the `address` argument to the Terraform process environment. When `null`, the `add_address_to_env` field will be omitted from the resulting object.\n  - `address` (`string`): URL of the root of the target Vault server.\n  - `ca_cert_dir` (`string`): Path to directory containing CA certificate files to validate the server&#39;s certificate. When `null`, the `ca_cert_dir` field will be omitted from the resulting object.\n  - `ca_cert_file` (`string`): Path to a CA certificate file to validate the server&#39;s certificate. When `null`, the `ca_cert_file` field will be omitted from the resulting object.\n  - `max_lease_ttl_seconds` (`number`): Maximum TTL for secret leases requested by this provider. When `null`, the `max_lease_ttl_seconds` field will be omitted from the resulting object.\n  - `max_retries` (`number`): Maximum number of retries when a 5xx error code is encountered. When `null`, the `max_retries` field will be omitted from the resulting object.\n  - `max_retries_ccc` (`number`): Maximum number of retries for Client Controlled Consistency related operations When `null`, the `max_retries_ccc` field will be omitted from the resulting object.\n  - `namespace` (`string`): The namespace to use. Available only for Vault Enterprise. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `skip_child_token` (`bool`): Set this to true to prevent the creation of ephemeral child token used by this provider. When `null`, the `skip_child_token` field will be omitted from the resulting object.\n  - `skip_get_vault_version` (`bool`): Skip the dynamic fetching of the Vault server version. When `null`, the `skip_get_vault_version` field will be omitted from the resulting object.\n  - `skip_tls_verify` (`bool`): Set this to true only if the target Vault server is an insecure development instance. When `null`, the `skip_tls_verify` field will be omitted from the resulting object.\n  - `tls_server_name` (`string`): Name to use as the SNI host when connecting via TLS. When `null`, the `tls_server_name` field will be omitted from the resulting object.\n  - `token` (`string`): Token to use to authenticate to Vault. When `null`, the `token` field will be omitted from the resulting object.\n  - `token_name` (`string`): Token name to use for creating the Vault child token. When `null`, the `token_name` field will be omitted from the resulting object.\n  - `vault_version_override` (`string`): Override the Vault server version, which is normally determined dynamically from the target Vault server When `null`, the `vault_version_override` field will be omitted from the resulting object.\n  - `auth_login` (`list[obj]`): Login to vault with an existing auth method using auth/&lt;mount&gt;/login When `null`, the `auth_login` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login.new](#fn-vaultauthloginnew) constructor.\n  - `auth_login_aws` (`list[obj]`): Login to vault using the AWS method When `null`, the `auth_login_aws` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_aws.new](#fn-vaultauthloginawsnew) constructor.\n  - `auth_login_azure` (`list[obj]`): Login to vault using the azure method When `null`, the `auth_login_azure` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_azure.new](#fn-vaultauthloginazurenew) constructor.\n  - `auth_login_cert` (`list[obj]`): Login to vault using the cert method When `null`, the `auth_login_cert` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_cert.new](#fn-vaultauthlogincertnew) constructor.\n  - `auth_login_gcp` (`list[obj]`): Login to vault using the gcp method When `null`, the `auth_login_gcp` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_gcp.new](#fn-vaultauthlogingcpnew) constructor.\n  - `auth_login_jwt` (`list[obj]`): Login to vault using the jwt method When `null`, the `auth_login_jwt` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_jwt.new](#fn-vaultauthloginjwtnew) constructor.\n  - `auth_login_kerberos` (`list[obj]`): Login to vault using the kerberos method When `null`, the `auth_login_kerberos` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_kerberos.new](#fn-vaultauthloginkerberosnew) constructor.\n  - `auth_login_oci` (`list[obj]`): Login to vault using the OCI method When `null`, the `auth_login_oci` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_oci.new](#fn-vaultauthloginocinew) constructor.\n  - `auth_login_oidc` (`list[obj]`): Login to vault using the oidc method When `null`, the `auth_login_oidc` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_oidc.new](#fn-vaultauthloginoidcnew) constructor.\n  - `auth_login_radius` (`list[obj]`): Login to vault using the radius method When `null`, the `auth_login_radius` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_radius.new](#fn-vaultauthloginradiusnew) constructor.\n  - `auth_login_token_file` (`list[obj]`): Login to vault using  When `null`, the `auth_login_token_file` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_token_file.new](#fn-vaultauthlogintokenfilenew) constructor.\n  - `auth_login_userpass` (`list[obj]`): Login to vault using the userpass method When `null`, the `auth_login_userpass` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_userpass.new](#fn-vaultauthloginuserpassnew) constructor.\n  - `client_auth` (`list[obj]`): Client authentication credentials. When `null`, the `client_auth` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.client_auth.new](#fn-vaultclientauthnew) constructor.\n  - `headers` (`list[obj]`): The headers to send with each Vault request. When `null`, the `headers` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.headers.new](#fn-vaultheadersnew) constructor.\n  - `alias` (`string`): The provider `alias` to set for this instance of the provider block. When `null`, the `alias`\n  field will be omitted from the resulting provider block.\n  - `src` (`string`): The provider `source` to set on the resulting `required_providers` block. If `src` or `version` is\n  set and is not `null`, a `required_providers` block and entry for the provider will be injected into the document.\n  - `version` (`string`): The provider `version` to set on the resulting `required_providers` block. If `src` or\n  `version` is set and is not `null`, a `required_providers` block and entry for the provider will be injected into the\n  document.\n\n\n**Returns**:\n- A mixin object that injects the new provider (and optionally, `required_providers` block) into the root Terraform configuration.\n', args=[]),
  new(
    address,
    add_address_to_env=null,
    auth_login=null,
    auth_login_aws=null,
    auth_login_azure=null,
    auth_login_cert=null,
    auth_login_gcp=null,
    auth_login_jwt=null,
    auth_login_kerberos=null,
    auth_login_oci=null,
    auth_login_oidc=null,
    auth_login_radius=null,
    auth_login_token_file=null,
    auth_login_userpass=null,
    ca_cert_dir=null,
    ca_cert_file=null,
    client_auth=null,
    headers=null,
    max_lease_ttl_seconds=null,
    max_retries=null,
    max_retries_ccc=null,
    namespace=null,
    skip_child_token=null,
    skip_get_vault_version=null,
    skip_tls_verify=null,
    tls_server_name=null,
    token=null,
    token_name=null,
    vault_version_override=null,
    alias=null,
    src=null,
    version=null
  ):: tf.withProvider(
    name='vault',
    alias=alias,
    src=src,
    version=version,
    attrs=self.newAttrs(
      add_address_to_env=add_address_to_env,
      address=address,
      auth_login=auth_login,
      auth_login_aws=auth_login_aws,
      auth_login_azure=auth_login_azure,
      auth_login_cert=auth_login_cert,
      auth_login_gcp=auth_login_gcp,
      auth_login_jwt=auth_login_jwt,
      auth_login_kerberos=auth_login_kerberos,
      auth_login_oci=auth_login_oci,
      auth_login_oidc=auth_login_oidc,
      auth_login_radius=auth_login_radius,
      auth_login_token_file=auth_login_token_file,
      auth_login_userpass=auth_login_userpass,
      ca_cert_dir=ca_cert_dir,
      ca_cert_file=ca_cert_file,
      client_auth=client_auth,
      headers=headers,
      max_lease_ttl_seconds=max_lease_ttl_seconds,
      max_retries=max_retries,
      max_retries_ccc=max_retries_ccc,
      namespace=namespace,
      skip_child_token=skip_child_token,
      skip_get_vault_version=skip_get_vault_version,
      skip_tls_verify=skip_tls_verify,
      tls_server_name=tls_server_name,
      token=token,
      token_name=token_name,
      vault_version_override=vault_version_override
    )
  ),
  '#newAttrs':: d.fn(help='\n`vault.provider.` constructs a new object with attributes and blocks configured for the `vault`\nTerraform `provider`.\n\nUnlike [vault.provider.new](#fn-vaultnew), this function will not inject the `provider`\nblock into the root Terraform document. Instead, this must be passed in as the `attrs` argument for the\n[tf.withProvider](https://github.com/tf-libsonnet/core/tree/main/docs#fn-withprovider) function to build a complete block.\n\nThis is most useful when you need to preprocess the attributes with functions, conditional, or looping logic prior to\ninjecting into a complete block.\n\n**Args**:\n  - `add_address_to_env` (`string`): If true, adds the value of the `address` argument to the Terraform process environment. When `null`, the `add_address_to_env` field will be omitted from the resulting object.\n  - `address` (`string`): URL of the root of the target Vault server.\n  - `ca_cert_dir` (`string`): Path to directory containing CA certificate files to validate the server&#39;s certificate. When `null`, the `ca_cert_dir` field will be omitted from the resulting object.\n  - `ca_cert_file` (`string`): Path to a CA certificate file to validate the server&#39;s certificate. When `null`, the `ca_cert_file` field will be omitted from the resulting object.\n  - `max_lease_ttl_seconds` (`number`): Maximum TTL for secret leases requested by this provider. When `null`, the `max_lease_ttl_seconds` field will be omitted from the resulting object.\n  - `max_retries` (`number`): Maximum number of retries when a 5xx error code is encountered. When `null`, the `max_retries` field will be omitted from the resulting object.\n  - `max_retries_ccc` (`number`): Maximum number of retries for Client Controlled Consistency related operations When `null`, the `max_retries_ccc` field will be omitted from the resulting object.\n  - `namespace` (`string`): The namespace to use. Available only for Vault Enterprise. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `skip_child_token` (`bool`): Set this to true to prevent the creation of ephemeral child token used by this provider. When `null`, the `skip_child_token` field will be omitted from the resulting object.\n  - `skip_get_vault_version` (`bool`): Skip the dynamic fetching of the Vault server version. When `null`, the `skip_get_vault_version` field will be omitted from the resulting object.\n  - `skip_tls_verify` (`bool`): Set this to true only if the target Vault server is an insecure development instance. When `null`, the `skip_tls_verify` field will be omitted from the resulting object.\n  - `tls_server_name` (`string`): Name to use as the SNI host when connecting via TLS. When `null`, the `tls_server_name` field will be omitted from the resulting object.\n  - `token` (`string`): Token to use to authenticate to Vault. When `null`, the `token` field will be omitted from the resulting object.\n  - `token_name` (`string`): Token name to use for creating the Vault child token. When `null`, the `token_name` field will be omitted from the resulting object.\n  - `vault_version_override` (`string`): Override the Vault server version, which is normally determined dynamically from the target Vault server When `null`, the `vault_version_override` field will be omitted from the resulting object.\n  - `auth_login` (`list[obj]`): Login to vault with an existing auth method using auth/&lt;mount&gt;/login When `null`, the `auth_login` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login.new](#fn-vaultauthloginnew) constructor.\n  - `auth_login_aws` (`list[obj]`): Login to vault using the AWS method When `null`, the `auth_login_aws` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_aws.new](#fn-vaultauthloginawsnew) constructor.\n  - `auth_login_azure` (`list[obj]`): Login to vault using the azure method When `null`, the `auth_login_azure` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_azure.new](#fn-vaultauthloginazurenew) constructor.\n  - `auth_login_cert` (`list[obj]`): Login to vault using the cert method When `null`, the `auth_login_cert` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_cert.new](#fn-vaultauthlogincertnew) constructor.\n  - `auth_login_gcp` (`list[obj]`): Login to vault using the gcp method When `null`, the `auth_login_gcp` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_gcp.new](#fn-vaultauthlogingcpnew) constructor.\n  - `auth_login_jwt` (`list[obj]`): Login to vault using the jwt method When `null`, the `auth_login_jwt` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_jwt.new](#fn-vaultauthloginjwtnew) constructor.\n  - `auth_login_kerberos` (`list[obj]`): Login to vault using the kerberos method When `null`, the `auth_login_kerberos` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_kerberos.new](#fn-vaultauthloginkerberosnew) constructor.\n  - `auth_login_oci` (`list[obj]`): Login to vault using the OCI method When `null`, the `auth_login_oci` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_oci.new](#fn-vaultauthloginocinew) constructor.\n  - `auth_login_oidc` (`list[obj]`): Login to vault using the oidc method When `null`, the `auth_login_oidc` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_oidc.new](#fn-vaultauthloginoidcnew) constructor.\n  - `auth_login_radius` (`list[obj]`): Login to vault using the radius method When `null`, the `auth_login_radius` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_radius.new](#fn-vaultauthloginradiusnew) constructor.\n  - `auth_login_token_file` (`list[obj]`): Login to vault using  When `null`, the `auth_login_token_file` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_token_file.new](#fn-vaultauthlogintokenfilenew) constructor.\n  - `auth_login_userpass` (`list[obj]`): Login to vault using the userpass method When `null`, the `auth_login_userpass` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.auth_login_userpass.new](#fn-vaultauthloginuserpassnew) constructor.\n  - `client_auth` (`list[obj]`): Client authentication credentials. When `null`, the `client_auth` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.client_auth.new](#fn-vaultclientauthnew) constructor.\n  - `headers` (`list[obj]`): The headers to send with each Vault request. When `null`, the `headers` sub block will be omitted from the resulting object. When setting the sub block, it is recommended to construct the object using the [vault.provider.headers.new](#fn-vaultheadersnew) constructor.\n\n**Returns**:\n  - An attribute object that can be used with [tf.withProvider](https://github.com/tf-libsonnet/core/tree/main/docs#fn-withprovider) to construct a new `vault` provider\n  configuration into the root Terraform configuration.\n', args=[]),
  newAttrs(
    address,
    add_address_to_env=null,
    auth_login=null,
    auth_login_aws=null,
    auth_login_azure=null,
    auth_login_cert=null,
    auth_login_gcp=null,
    auth_login_jwt=null,
    auth_login_kerberos=null,
    auth_login_oci=null,
    auth_login_oidc=null,
    auth_login_radius=null,
    auth_login_token_file=null,
    auth_login_userpass=null,
    ca_cert_dir=null,
    ca_cert_file=null,
    client_auth=null,
    headers=null,
    max_lease_ttl_seconds=null,
    max_retries=null,
    max_retries_ccc=null,
    namespace=null,
    skip_child_token=null,
    skip_get_vault_version=null,
    skip_tls_verify=null,
    tls_server_name=null,
    token=null,
    token_name=null,
    vault_version_override=null
  ):: std.prune(a={
    add_address_to_env: add_address_to_env,
    address: address,
    auth_login: auth_login,
    auth_login_aws: auth_login_aws,
    auth_login_azure: auth_login_azure,
    auth_login_cert: auth_login_cert,
    auth_login_gcp: auth_login_gcp,
    auth_login_jwt: auth_login_jwt,
    auth_login_kerberos: auth_login_kerberos,
    auth_login_oci: auth_login_oci,
    auth_login_oidc: auth_login_oidc,
    auth_login_radius: auth_login_radius,
    auth_login_token_file: auth_login_token_file,
    auth_login_userpass: auth_login_userpass,
    ca_cert_dir: ca_cert_dir,
    ca_cert_file: ca_cert_file,
    client_auth: client_auth,
    headers: headers,
    max_lease_ttl_seconds: max_lease_ttl_seconds,
    max_retries: max_retries,
    max_retries_ccc: max_retries_ccc,
    namespace: namespace,
    skip_child_token: skip_child_token,
    skip_get_vault_version: skip_get_vault_version,
    skip_tls_verify: skip_tls_verify,
    tls_server_name: tls_server_name,
    token: token,
    token_name: token_name,
    vault_version_override: vault_version_override,
  }),
  auth_login:: {
    '#new':: d.fn(help='\n`vault.auth_login.new` constructs a new object with attributes and blocks configured for the `auth_login`\nTerraform sub block.\n\n\n\n**Args**:\n  - `method` (`string`): Set the `method` field on the resulting object. When `null`, the `method` field will be omitted from the resulting object.\n  - `namespace` (`string`): Set the `namespace` field on the resulting object. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `parameters` (`obj`): Set the `parameters` field on the resulting object. When `null`, the `parameters` field will be omitted from the resulting object.\n  - `path` (`string`): Set the `path` field on the resulting object.\n\n**Returns**:\n  - An attribute object that represents the `auth_login` sub block.\n', args=[]),
    new(
      path,
      method=null,
      namespace=null,
      parameters=null
    ):: std.prune(a={
      method: method,
      namespace: namespace,
      parameters: parameters,
      path: path,
    }),
  },
  auth_login_aws:: {
    '#new':: d.fn(help='\n`vault.auth_login_aws.new` constructs a new object with attributes and blocks configured for the `auth_login_aws`\nTerraform sub block.\n\n\n\n**Args**:\n  - `aws_access_key_id` (`string`): The AWS access key ID. When `null`, the `aws_access_key_id` field will be omitted from the resulting object.\n  - `aws_iam_endpoint` (`string`): The IAM endpoint URL. When `null`, the `aws_iam_endpoint` field will be omitted from the resulting object.\n  - `aws_profile` (`string`): The name of the AWS profile. When `null`, the `aws_profile` field will be omitted from the resulting object.\n  - `aws_region` (`string`): The AWS region. When `null`, the `aws_region` field will be omitted from the resulting object.\n  - `aws_role_arn` (`string`): The ARN of the AWS Role to assume.Used during STS AssumeRole When `null`, the `aws_role_arn` field will be omitted from the resulting object.\n  - `aws_role_session_name` (`string`): Specifies the name to attach to the AWS role session. Used during STS AssumeRole When `null`, the `aws_role_session_name` field will be omitted from the resulting object.\n  - `aws_secret_access_key` (`string`): The AWS secret access key. When `null`, the `aws_secret_access_key` field will be omitted from the resulting object.\n  - `aws_session_token` (`string`): The AWS session token. When `null`, the `aws_session_token` field will be omitted from the resulting object.\n  - `aws_shared_credentials_file` (`string`): Path to the AWS shared credentials file. When `null`, the `aws_shared_credentials_file` field will be omitted from the resulting object.\n  - `aws_sts_endpoint` (`string`): The STS endpoint URL. When `null`, the `aws_sts_endpoint` field will be omitted from the resulting object.\n  - `aws_web_identity_token_file` (`string`): Path to the file containing an OAuth 2.0 access token or OpenID Connect ID token. When `null`, the `aws_web_identity_token_file` field will be omitted from the resulting object.\n  - `header_value` (`string`): The Vault header value to include in the STS signing request. When `null`, the `header_value` field will be omitted from the resulting object.\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `role` (`string`): The Vault role to use when logging into Vault.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_aws` sub block.\n', args=[]),
    new(
      role,
      aws_access_key_id=null,
      aws_iam_endpoint=null,
      aws_profile=null,
      aws_region=null,
      aws_role_arn=null,
      aws_role_session_name=null,
      aws_secret_access_key=null,
      aws_session_token=null,
      aws_shared_credentials_file=null,
      aws_sts_endpoint=null,
      aws_web_identity_token_file=null,
      header_value=null,
      mount=null,
      namespace=null
    ):: std.prune(a={
      aws_access_key_id: aws_access_key_id,
      aws_iam_endpoint: aws_iam_endpoint,
      aws_profile: aws_profile,
      aws_region: aws_region,
      aws_role_arn: aws_role_arn,
      aws_role_session_name: aws_role_session_name,
      aws_secret_access_key: aws_secret_access_key,
      aws_session_token: aws_session_token,
      aws_shared_credentials_file: aws_shared_credentials_file,
      aws_sts_endpoint: aws_sts_endpoint,
      aws_web_identity_token_file: aws_web_identity_token_file,
      header_value: header_value,
      mount: mount,
      namespace: namespace,
      role: role,
    }),
  },
  auth_login_azure:: {
    '#new':: d.fn(help='\n`vault.auth_login_azure.new` constructs a new object with attributes and blocks configured for the `auth_login_azure`\nTerraform sub block.\n\n\n\n**Args**:\n  - `client_id` (`string`): The identity&#39;s client ID. When `null`, the `client_id` field will be omitted from the resulting object.\n  - `jwt` (`string`): A signed JSON Web Token. If not specified on will be created automatically When `null`, the `jwt` field will be omitted from the resulting object.\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `resource_group_name` (`string`): The resource group for the machine that generated the MSI token. This information can be obtained through instance metadata.\n  - `role` (`string`): Name of the login role.\n  - `scope` (`string`): The scopes to include in the token request. When `null`, the `scope` field will be omitted from the resulting object.\n  - `subscription_id` (`string`): The subscription ID for the machine that generated the MSI token. This information can be obtained through instance metadata.\n  - `tenant_id` (`string`): Provides the tenant ID to use in a multi-tenant authentication scenario. When `null`, the `tenant_id` field will be omitted from the resulting object.\n  - `vm_name` (`string`): The virtual machine name for the machine that generated the MSI token. This information can be obtained through instance metadata. When `null`, the `vm_name` field will be omitted from the resulting object.\n  - `vmss_name` (`string`): The virtual machine scale set name for the machine that generated the MSI token. This information can be obtained through instance metadata. When `null`, the `vmss_name` field will be omitted from the resulting object.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_azure` sub block.\n', args=[]),
    new(
      resource_group_name,
      role,
      subscription_id,
      client_id=null,
      jwt=null,
      mount=null,
      namespace=null,
      scope=null,
      tenant_id=null,
      vm_name=null,
      vmss_name=null
    ):: std.prune(a={
      client_id: client_id,
      jwt: jwt,
      mount: mount,
      namespace: namespace,
      resource_group_name: resource_group_name,
      role: role,
      scope: scope,
      subscription_id: subscription_id,
      tenant_id: tenant_id,
      vm_name: vm_name,
      vmss_name: vmss_name,
    }),
  },
  auth_login_cert:: {
    '#new':: d.fn(help='\n`vault.auth_login_cert.new` constructs a new object with attributes and blocks configured for the `auth_login_cert`\nTerraform sub block.\n\n\n\n**Args**:\n  - `cert_file` (`string`): Path to a file containing the client certificate.\n  - `key_file` (`string`): Path to a file containing the private key that the certificate was issued for.\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `name` (`string`): Name of the certificate&#39;s role When `null`, the `name` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_cert` sub block.\n', args=[]),
    new(
      cert_file,
      key_file,
      mount=null,
      name=null,
      namespace=null
    ):: std.prune(a={
      cert_file: cert_file,
      key_file: key_file,
      mount: mount,
      name: name,
      namespace: namespace,
    }),
  },
  auth_login_gcp:: {
    '#new':: d.fn(help='\n`vault.auth_login_gcp.new` constructs a new object with attributes and blocks configured for the `auth_login_gcp`\nTerraform sub block.\n\n\n\n**Args**:\n  - `credentials` (`string`): Path to the Google Cloud credentials file. When `null`, the `credentials` field will be omitted from the resulting object.\n  - `jwt` (`string`): A signed JSON Web Token. When `null`, the `jwt` field will be omitted from the resulting object.\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `role` (`string`): Name of the login role.\n  - `service_account` (`string`): IAM service account. When `null`, the `service_account` field will be omitted from the resulting object.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_gcp` sub block.\n', args=[]),
    new(
      role,
      credentials=null,
      jwt=null,
      mount=null,
      namespace=null,
      service_account=null
    ):: std.prune(a={
      credentials: credentials,
      jwt: jwt,
      mount: mount,
      namespace: namespace,
      role: role,
      service_account: service_account,
    }),
  },
  auth_login_jwt:: {
    '#new':: d.fn(help='\n`vault.auth_login_jwt.new` constructs a new object with attributes and blocks configured for the `auth_login_jwt`\nTerraform sub block.\n\n\n\n**Args**:\n  - `jwt` (`string`): A signed JSON Web Token.\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `role` (`string`): Name of the login role.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_jwt` sub block.\n', args=[]),
    new(
      jwt,
      role,
      mount=null,
      namespace=null
    ):: std.prune(a={
      jwt: jwt,
      mount: mount,
      namespace: namespace,
      role: role,
    }),
  },
  auth_login_kerberos:: {
    '#new':: d.fn(help='\n`vault.auth_login_kerberos.new` constructs a new object with attributes and blocks configured for the `auth_login_kerberos`\nTerraform sub block.\n\n\n\n**Args**:\n  - `disable_fast_negotiation` (`bool`): Disable the Kerberos FAST negotiation. When `null`, the `disable_fast_negotiation` field will be omitted from the resulting object.\n  - `keytab_path` (`string`): The Kerberos keytab file containing the entry of the login entity. When `null`, the `keytab_path` field will be omitted from the resulting object.\n  - `krb5conf_path` (`string`): A valid Kerberos configuration file e.g. /etc/krb5.conf. When `null`, the `krb5conf_path` field will be omitted from the resulting object.\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `realm` (`string`): The Kerberos server&#39;s authoritative authentication domain When `null`, the `realm` field will be omitted from the resulting object.\n  - `remove_instance_name` (`bool`): Strip the host from the username found in the keytab. When `null`, the `remove_instance_name` field will be omitted from the resulting object.\n  - `service` (`string`): The service principle name. When `null`, the `service` field will be omitted from the resulting object.\n  - `token` (`string`): Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) token When `null`, the `token` field will be omitted from the resulting object.\n  - `username` (`string`): The username to login into Kerberos with. When `null`, the `username` field will be omitted from the resulting object.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_kerberos` sub block.\n', args=[]),
    new(
      disable_fast_negotiation=null,
      keytab_path=null,
      krb5conf_path=null,
      mount=null,
      namespace=null,
      realm=null,
      remove_instance_name=null,
      service=null,
      token=null,
      username=null
    ):: std.prune(a={
      disable_fast_negotiation: disable_fast_negotiation,
      keytab_path: keytab_path,
      krb5conf_path: krb5conf_path,
      mount: mount,
      namespace: namespace,
      realm: realm,
      remove_instance_name: remove_instance_name,
      service: service,
      token: token,
      username: username,
    }),
  },
  auth_login_oci:: {
    '#new':: d.fn(help='\n`vault.auth_login_oci.new` constructs a new object with attributes and blocks configured for the `auth_login_oci`\nTerraform sub block.\n\n\n\n**Args**:\n  - `auth_type` (`string`): Authentication type to use when getting OCI credentials.\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `role` (`string`): Name of the login role.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_oci` sub block.\n', args=[]),
    new(
      auth_type,
      role,
      mount=null,
      namespace=null
    ):: std.prune(a={
      auth_type: auth_type,
      mount: mount,
      namespace: namespace,
      role: role,
    }),
  },
  auth_login_oidc:: {
    '#new':: d.fn(help='\n`vault.auth_login_oidc.new` constructs a new object with attributes and blocks configured for the `auth_login_oidc`\nTerraform sub block.\n\n\n\n**Args**:\n  - `callback_address` (`string`): The callback address. Must be a valid URI without the path. When `null`, the `callback_address` field will be omitted from the resulting object.\n  - `callback_listener_address` (`string`): The callback listener&#39;s address. Must be a valid URI without the path. When `null`, the `callback_listener_address` field will be omitted from the resulting object.\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `role` (`string`): Name of the login role.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_oidc` sub block.\n', args=[]),
    new(
      role,
      callback_address=null,
      callback_listener_address=null,
      mount=null,
      namespace=null
    ):: std.prune(a={
      callback_address: callback_address,
      callback_listener_address: callback_listener_address,
      mount: mount,
      namespace: namespace,
      role: role,
    }),
  },
  auth_login_radius:: {
    '#new':: d.fn(help='\n`vault.auth_login_radius.new` constructs a new object with attributes and blocks configured for the `auth_login_radius`\nTerraform sub block.\n\n\n\n**Args**:\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `password` (`string`): The Radius password for username.\n  - `username` (`string`): The Radius username.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_radius` sub block.\n', args=[]),
    new(
      password,
      username,
      mount=null,
      namespace=null
    ):: std.prune(a={
      mount: mount,
      namespace: namespace,
      password: password,
      username: username,
    }),
  },
  auth_login_token_file:: {
    '#new':: d.fn(help='\n`vault.auth_login_token_file.new` constructs a new object with attributes and blocks configured for the `auth_login_token_file`\nTerraform sub block.\n\n\n\n**Args**:\n  - `filename` (`string`): The name of a file containing a single line that is a valid Vault token\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n\n**Returns**:\n  - An attribute object that represents the `auth_login_token_file` sub block.\n', args=[]),
    new(
      filename,
      namespace=null
    ):: std.prune(a={
      filename: filename,
      namespace: namespace,
    }),
  },
  auth_login_userpass:: {
    '#new':: d.fn(help='\n`vault.auth_login_userpass.new` constructs a new object with attributes and blocks configured for the `auth_login_userpass`\nTerraform sub block.\n\n\n\n**Args**:\n  - `mount` (`string`): The path where the authentication engine is mounted. When `null`, the `mount` field will be omitted from the resulting object.\n  - `namespace` (`string`): The authentication engine&#39;s namespace. When `null`, the `namespace` field will be omitted from the resulting object.\n  - `password` (`string`): Login with password When `null`, the `password` field will be omitted from the resulting object.\n  - `password_file` (`string`): Login with password from a file When `null`, the `password_file` field will be omitted from the resulting object.\n  - `username` (`string`): Login with username\n\n**Returns**:\n  - An attribute object that represents the `auth_login_userpass` sub block.\n', args=[]),
    new(
      username,
      mount=null,
      namespace=null,
      password=null,
      password_file=null
    ):: std.prune(a={
      mount: mount,
      namespace: namespace,
      password: password,
      password_file: password_file,
      username: username,
    }),
  },
  client_auth:: {
    '#new':: d.fn(help='\n`vault.client_auth.new` constructs a new object with attributes and blocks configured for the `client_auth`\nTerraform sub block.\n\n\n\n**Args**:\n  - `cert_file` (`string`): Path to a file containing the client certificate. When `null`, the `cert_file` field will be omitted from the resulting object.\n  - `key_file` (`string`): Path to a file containing the private key that the certificate was issued for. When `null`, the `key_file` field will be omitted from the resulting object.\n\n**Returns**:\n  - An attribute object that represents the `client_auth` sub block.\n', args=[]),
    new(
      cert_file=null,
      key_file=null
    ):: std.prune(a={
      cert_file: cert_file,
      key_file: key_file,
    }),
  },
  headers:: {
    '#new':: d.fn(help='\n`vault.headers.new` constructs a new object with attributes and blocks configured for the `headers`\nTerraform sub block.\n\n\n\n**Args**:\n  - `name` (`string`): The header name\n  - `value` (`string`): The header value\n\n**Returns**:\n  - An attribute object that represents the `headers` sub block.\n', args=[]),
    new(
      name,
      value
    ):: std.prune(a={
      name: name,
      value: value,
    }),
  },
}
